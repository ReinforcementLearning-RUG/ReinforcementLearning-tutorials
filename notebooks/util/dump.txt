import threading
from notebooks.util.metricstracker import MetricsTracker
from stable_baselines3.common.callbacks import BaseCallback
from stable_baselines3.common.results_plotter import load_results, ts2xy, plot_results

class PlottingCallback(BaseCallback):
    """
    A custom callback that derives from ``BaseCallback``.

    :param verbose: Verbosity level: 0 for no output, 1 for info messages, 2 for debug messages
    """
    def __init__(self, agent_id: str, verbose: int = 0, log_dir = "./util/logs"):
        super().__init__(verbose)
        self.metrics_tracker = MetricsTracker()
        self.agent_id = agent_id
        self.log_dir = log_dir

    def _on_step(self) -> bool:
        """
        This method will be called by the model after each call to `env.step()`.

        For child callback (of an `EventCallback`), this will be called
        when the event is triggered.

        :return: If the callback returns False, training is aborted early.
        """
        print(ts2xy(load_results(log_dir), 'timesteps'))
        


        # Record reward and loss during training
        #self.metrics_tracker.record_reward(self.locals["agent_id"], self.locals["reward"])
        #self.metrics_tracker.record_loss(self.locals["agent_id"], self.locals["loss"])
        return True

    def _on_training_end(self) -> None:
        """
        This event is triggered before exiting the `learn()` method.
        """
        # Plot the metrics at the end of training
        #self.metrics_tracker.plot()
